{"version":3,"sources":["webpack:///./node_modules/markdown/lib/index.js","webpack:///./node_modules/markdown/lib/markdown.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/util/node_modules/inherits/inherits.js","webpack:///./node_modules/throttle-debounce/index.cjs.js","webpack:///./node_modules/immutability-helper/index.js","webpack:///./node_modules/util/util.js"],"names":["exports","markdown","__webpack_require__","parse","toHTML","expose","Markdown","dialect","this","dialects","Gruber","Error","String","em_state","strong_state","debug_indent","mk_block_toSource","uneval","toString","trailing","lineNumber","mk_block_inspect","util","inspect","source","toTree","options","input","toHTMLTree","renderJsonML","attrs","extract_attr","refs","references","html","convert_tree_to_html","tree","i","jsonml","slice","preprocessTreeNode","level","code","push","apply","splice","length","src","href","ref","original","title","key","merge_text_nodes","mk_block","block","trail","line","arguments","s","toSource","undefined","count_lines","str","n","indexOf","strong_em","tag","md","state_slot","other_slot","CloseTag","len","len_after","name","text","orig_match","shift","other","state","unshift","res","processInline","substr","last","pop","concat","prototype","split_blocks","splitBlocks","startLine","replace","m","re","blocks","line_no","exec","lastIndex","processBlock","next","cbs","ord","__order__","__call__","call","isArray","debug","inline","custom_root","Array","old_tree","b","args","print","console","log","loop_re_over_block","cb","valueOf","atxHeader","match","header","setextHeader","ret","block_search","substring","join","horizRule","lists","any_list","bullet_list","is_list_re","RegExp","indent_re","regex_for_depth","depth","expand_tab","add","li","loose","nl","add_to","what","get_contained_blocks","x","paragraphify","stack","list","last_li","sublist","make_list","lines","split","li_accumulate","l","line_re","wanted_depth","Math","floor","found","indent","contained","forEach","next_block","hr","blockquote","prev","abutting","processedBlock","attr","isEmpty","referenceDefn","toLowerCase","para","__oneElement__","oneElement","patterns_or_re","previous_nodes","__patterns__","index","patterns","out","]","}","__escape__","\\","escaped","charAt","![","image","alt","[","link","orig","DialectHelpers","inline_until_char","consumed","children","url","open_parens","<","autoLink","`","inlineCode","  \n","lineBreak","buildBlockOrder","d","buildInlinePatterns","fn","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","meta_string","meta","split_meta_hash","parts","in_quotes","letter","test","id","document_meta","pairs","p","value","block_meta","hash","node","a","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","r","html_attrs","align","trim","row","html_row","inline_meta","matches","before","k","obj","Object","arr","thisp","hasOwnProperty","escapeHTML","render_tree","attributes","content","tag_attrs","root","module","isBuffer","arg","copy","fill","readUInt8","inherits","throttle","delay","noTrailing","callback","debounceMode","timeoutID","lastExec","wrapper","self","elapsed","Number","Date","clearTimeout","setTimeout","clear","defineProperty","debounce","atBegin","invariant","type","assign","target","getAllKeys","getOwnPropertySymbols","keys","object","constructor","Map","Set","getPrototypeOf","create","newContext","commands","defaultCommands","update","extend","directive","isEquals","spec","$apply","nextObject","objectWasNextObject","nextValueForKey","get","nextObjectValue","set","$push","invariantPushAndUnshift","$unshift","$splice","originalObject","invariantSplices","invariantSplice","$set","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","$add","invariantMapOrSet","pair","has","$remove","delete","$merge","invariantMerge","specValue","invariantApply","contextForExport","command","typeOfTarget","default","global","process","formatRegExp","format","f","isString","objects","JSON","stringify","_","isNull","isObject","deprecate","msg","isUndefined","noDeprecation","warned","deprecated","throwDeprecation","traceDeprecation","trace","error","debugEnviron","debugs","opts","ctx","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","primitive","formatPrimitive","simple","isNumber","visibleKeys","arrayToHash","array","val","idx","getOwnPropertyNames","isError","formatError","isRegExp","isDate","output","base","braces","toUTCString","formatArray","formatProperty","map","reduceToSingleString","reduce","cur","numLinesEst","desc","getOwnPropertyDescriptor","ar","objectToString","e","o","pad","debuglog","env","NODE_DEBUG","toUpperCase","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","string","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","months","prop","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","origin"],"mappings":"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","file":"chunk/vendors~topic_index.js","sourcesContent":["// super simple module for the most common nodejs use case.\nexports.markdown = require(\"./markdown\");\nexports.parse = exports.markdown.toHTML;\n","// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","module.exports = require('util').inherits\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nfunction throttle ( delay, noTrailing, callback, debounceMode ) {\n\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tvar timeoutID;\n\n\t// Keep track of the last time `callback` was executed.\n\tvar lastExec = 0;\n\n\t// `noTrailing` defaults to falsy.\n\tif ( typeof noTrailing !== 'boolean' ) {\n\t\tdebounceMode = callback;\n\t\tcallback = noTrailing;\n\t\tnoTrailing = undefined;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper () {\n\n\t\tvar self = this;\n\t\tvar elapsed = Number(new Date()) - lastExec;\n\t\tvar args = arguments;\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec () {\n\t\t\tlastExec = Number(new Date());\n\t\t\tcallback.apply(self, args);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear () {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif ( debounceMode && !timeoutID ) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\t// Clear any existing timeout.\n\t\tif ( timeoutID ) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\n\t\tif ( debounceMode === undefined && elapsed > delay ) {\n\t\t\t/*\n\t\t\t * In throttle mode, if `delay` time has been exceeded, execute\n\t\t\t * `callback`.\n\t\t\t */\n\t\t\texec();\n\n\t\t} else if ( noTrailing !== true ) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n\t\t}\n\n\t}\n\n\t// Return the wrapper function.\n\treturn wrapper;\n\n}\n\n/* eslint-disable no-undefined */\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\nfunction debounce ( delay, atBegin, callback ) {\n\treturn callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexports.throttle = throttle;\nexports.debounce = debounce;\n","var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\n\nvar toString = Object.prototype.toString\nvar type = function(obj) {\n  return toString.call(obj).slice(8, -1);\n}\n\nvar assign = Object.assign || /* istanbul ignore next */ function assign(target, source) {\n  getAllKeys(source).forEach(function(key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ?\n  function(obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)) } :\n  /* istanbul ignore next */ function(obj) { return Object.keys(obj) };\n\n/* istanbul ignore next */\nfunction copy(object) {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object)\n  } else if (type(object) === 'Map') {\n    return new Map(object)\n  } else if (type(object) === 'Set') {\n    return new Set(object)\n  } else if (object && typeof object === 'object') {\n    var prototype = Object.getPrototypeOf(object);\n    return assign(Object.create(prototype), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n  update.extend = function(directive, fn) {\n    commands[directive] = fn;\n  };\n  update.isEquals = function(a, b) { return a === b; };\n\n  return update;\n\n  function update(object, spec) {\n    if (typeof spec === 'function') {\n      spec = { $apply: spec };\n    }\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(\n        !Array.isArray(spec),\n        'update(): You provided an invalid spec to update(). The spec may ' +\n        'not contain an array except as the value of $set, $push, $unshift, ' +\n        '$splice or any custom command allowing an array value.'\n      );\n    }\n\n    invariant(\n      typeof spec === 'object' && spec !== null,\n      'update(): You provided an invalid spec to update(). The spec and ' +\n      'every included key path must be plain objects containing one of the ' +\n      'following commands: %s.',\n      Object.keys(commands).join(', ')\n    );\n\n    var nextObject = object;\n    var index, key;\n    getAllKeys(spec).forEach(function(key) {\n      if (hasOwnProperty.call(commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n        if (objectWasNextObject && update.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey =\n          type(object) === 'Map'\n            ? update(object.get(key), spec[key])\n            : update(object[key], spec[key]);\n        var nextObjectValue =\n          type(nextObject) === 'Map'\n              ? nextObject.get(key)\n              : nextObject[key];\n        if (!update.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    })\n    return nextObject;\n  }\n\n}\n\nvar defaultCommands = {\n  $push: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function(value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function(args) {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function(value, nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function(targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n\n    targets.forEach(function(target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n\n    return nextObjectCopy;\n  },\n  $unset: function(value, nextObject, spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function(key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n    if (type(nextObject) === 'Map') {\n      value.forEach(function(pair) {\n        var key = pair[0];\n        var value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach(function(value) {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n    return nextObject;\n  },\n  $remove: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function(key) {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function(value, nextObject, spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function(key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function(value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\n\nvar contextForExport = newContext();\n\nmodule.exports = contextForExport;\nmodule.exports.default = contextForExport;\nmodule.exports.newContext = newContext;\n\n// invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  invariantSpecArray(spec[command], command)\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(\n    Array.isArray(spec),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    spec\n  );\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(\n    Array.isArray(value),\n    'Expected $splice target to be an array; got %s',\n    value\n  );\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected spec of $splice to be an array of arrays; got %s. ' +\n    'Did you forget to wrap your parameters in an array?',\n    value\n  );\n}\n\nfunction invariantApply(fn) {\n  invariant(\n    typeof fn === 'function',\n    'update(): expected spec of $apply to be a function; got %s.',\n    fn\n  );\n}\n\nfunction invariantSet(spec) {\n  invariant(\n    Object.keys(spec).length === 1,\n    'Cannot have more than one key in an object with $set'\n  );\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(\n    specValue && typeof specValue === 'object',\n    'update(): $merge expects a spec of type \\'object\\'; got %s',\n    specValue\n  );\n  invariant(\n    target && typeof target === 'object',\n    'update(): $merge expects a target of type \\'object\\'; got %s',\n    target\n  );\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(\n    typeOfTarget === 'Map' || typeOfTarget === 'Set',\n    'update(): %s expects a target of type Set or Map; got %s',\n    command,\n    typeOfTarget\n  );\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n"],"sourceRoot":""}